import {
  EvaluationContext,
  FlagEvaluationOptions,
  Provider,
  ProviderMetadata,
  ResolutionDetails,
} from '@openfeature/nodejs-sdk';

export class <%= libClassName %> implements Provider {
  /**
   * The provider metadata exposes provider specific information such as the name.
   * 
   * @url https://github.com/open-feature/spec/blob/main/specification/provider/providers.md#feature-provider-interface
   */
  metadata: ProviderMetadata = {
    name: <%= libClassName %>.name
  };

  /**
   * The context transformer can be used to validate and manipulate evaluation
   * context before flag evaluation. This is optional but can be useful in many
   * situations.
   * 
   * @url https://github.com/open-feature/spec/blob/main/specification/provider/providers.md#context-transformation
   */
  contextTransformer = () => ({});

  resolveBooleanEvaluation(
    flagKey: string,
    defaultValue: boolean,
    transformedContext: EvaluationContext,
    options: FlagEvaluationOptions
  ): Promise<ResolutionDetails<boolean>> {
    throw new Error('Method not implemented.');
  }

  resolveStringEvaluation(
    flagKey: string,
    defaultValue: string,
    transformedContext: EvaluationContext,
    options: FlagEvaluationOptions
  ): Promise<ResolutionDetails<string>> {
    throw new Error('Method not implemented.');
  }

  resolveNumberEvaluation(
    flagKey: string,
    defaultValue: number,
    transformedContext: EvaluationContext,
    options: FlagEvaluationOptions
  ): Promise<ResolutionDetails<number>> {
    throw new Error('Method not implemented.');
  }

  resolveObjectEvaluation<U extends object>(
    flagKey: string,
    defaultValue: U,
    transformedContext: EvaluationContext,
    options: FlagEvaluationOptions
  ): Promise<ResolutionDetails<U>> {
    throw new Error('Method not implemented.');
  }
}
